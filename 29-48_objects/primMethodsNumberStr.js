"use strict"


/*
Примитив
    Это – значение «примитивного» типа.
    Есть 7 примитивных типов: string, number,
    boolean, symbol, null, undefined и bigint.

Объект

    Может хранить множество значений как свойства.
    Объявляется при помощи фигурных скобок {},
    например: {name: "Рома", age: 30}. В JavaScript
    есть и другие виды объектов: например, функции
    тоже являются объектами.

    Одна из лучших особенностей объектов – это то, что
    мы можем хранить функцию как одно из свойств объекта.

    let roma = {
  name: "Рома",
  sayHi: function() {
    alert("Привет, дружище!");
  }
};

roma.sayHi(); // Привет, дружище!


    Однако у этих возможностей есть обратная сторона!

    Объекты «тяжелее» примитивов. Они нуждаются в
    дополнительных ресурсах
    для поддержания внутренней структуры.


 */

/*
Выбранное решение, хотя выглядит оно немного неуклюже:

    Примитивы остаются примитивами. Одно значение, как и хотелось.
    Язык позволяет осуществлять доступ к
    методам и свойствам строк, чисел, булевых
     значений и символов.
    Чтобы это работало, при таком доступе создаётся специальный
     «объект-обёртка», который предоставляет нужную
      функциональность, а после удаляется.

Каждый примитив имеет свой собственный «объект-обёртку»,
которые называются: String, Number, Boolean, Symbol и BigInt. Таким образом, они имеют разный набор методов.


 */

{
    console.log("////PRIMITIVES/////");
    let str = "Привет";
    console.log(str,str.toUpperCase());

    /*
    Число имеет собственный набор методов. Например,
    toFixed(n) округляет число до n знаков после запятой.
     */

    let num = 1.23456;

    console.log( num,num.toFixed(2) ); // 1.23

    /*
     Конструкторы String/Number/Boolean
     предназначены только для внутреннего пользования

    Некоторые языки, такие как Java, позволяют
    явное создание «объектов-обёрток» для примитивов при
    помощи такого синтаксиса как new Number(1) или
     new Boolean(false).

   В JavaScript, это тоже возможно по историческим причинам,
   но очень не рекомендуется. В некоторых местах
   последствия могут быть катастрофическими.

    Например:

    alert( typeof 0 ); // "число"

    alert( typeof new Number(0) ); // "object"!
    */





}









