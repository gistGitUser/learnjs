"use strict";

/*
пецификация состоит из трёх основных блоков:

describe("заголовок", function() { ... })

    Какую функциональность мы описываем. В нашем случае мы описываем функцию
    pow. Используется для группировки рабочих лошадок – блоков it.
it("описание", function() { ... })

    В первом аргументе блока it мы человеческим языком описываем
     конкретный способ использования функции, а во втором – пишем функцию,
      которая тестирует данный случай.
assert.equal(value1, value2)

    Код внутри блока it, если функция работает верно,
    должен выполняться без ошибок.
 */
describe("pow", function() {

    it("возводит в степень n", function() {
        assert.equal(pow(2, 3), 8);
        // assert.equal(pow(3, 3), 27);
    });
    //но лучше писать несколько тестов, т.к.
    //будет сразу видно в конкретном тесте ошибку

    it("3 в степени 3 будет 27", function() {
        assert.equal(pow(3, 3), 27);
    });


    //можно делать вложенные блоки
    describe("возводит x в степень 3", function() {

        function makeTest(x) {
            let expected = x * x * x;
            it(`${x} в степени 3 будет ${expected}`, function() {
                assert.equal(pow(x, 3), expected);
            });
        }

        for (let x = 1; x <= 5; x++) {
            makeTest(x);
        }

    });

    /*
    Мы можем задать before/after функции, которые будут выполняться
    до/после тестов, а также функции beforeEach/afterEach
    , выполняемые до/после каждого it.
     */
});

/*
Итого

В BDD сначала пишут спецификацию, а потом реализацию. В конце у нас есть и то, и другое.

Спецификацию можно использовать тремя способами:

    Как Тесты – они гарантируют, что функция работает правильно.
    Как Документацию – заголовки блоков describe и it описывают поведение функции.
    Как Примеры – тесты, по сути, являются готовыми примерами использования функции.

Имея спецификацию, мы можем улучшить, изменить и даже переписать функцию с нуля, и
при этом мы будем уверены, что она продолжает работать правильно.
 */

